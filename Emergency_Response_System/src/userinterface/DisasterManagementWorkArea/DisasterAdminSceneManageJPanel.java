/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DisasterManagementWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DisasterOrganization;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.Utils.HeaderColors;
import Business.WorkQueue.ReportingAdminSceneRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import javafx.scene.Scene;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dhankuwarsisodiya
 */
public class DisasterAdminSceneManageJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DisasterAdminSceneManageJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    Organization organization;
    Enterprise enterprise;
    Network network;
    EcoSystem business;
    ReportingAdminSceneRequest selectedSite;
            
    public DisasterAdminSceneManageJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Network network, EcoSystem business, Organization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.network = network;
        this.business = business;
        this.organization = organization;
        selectedSite = null;
         tblManageAssigned.getTableHeader().setDefaultRenderer(new HeaderColors());
        populateTable();
        populateSiteNameCombo();
        populateSiteManagerCombo();
        jButton2.setBackground(new Color(255,255,255));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblManageAssigned = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        siteNameComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        sceneManagerCombo = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1058, 840));
        setPreferredSize(new java.awt.Dimension(1058, 840));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setForeground(new java.awt.Color(0, 102, 255));

        tblManageAssigned.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        tblManageAssigned.setForeground(new java.awt.Color(25, 56, 82));
        tblManageAssigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Scene Id", "Scene Name ", "Scene Manager", "Sender (Reporting Manger)", "Status", "Additional Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblManageAssigned.setSelectionBackground(new java.awt.Color(56, 90, 174));
        jScrollPane1.setViewportView(tblManageAssigned);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 838, 170));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(25, 56, 82));
        jLabel1.setText("Site Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 380, -1, -1));

        siteNameComboBox.setBackground(new java.awt.Color(255, 255, 255));
        siteNameComboBox.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        siteNameComboBox.setForeground(new java.awt.Color(25, 56, 82));
        siteNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        siteNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siteNameComboBoxActionPerformed(evt);
            }
        });
        add(siteNameComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(491, 376, 200, -1));

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(25, 56, 82));
        jLabel2.setText("Site Manager");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 419, -1, -1));

        sceneManagerCombo.setBackground(new java.awt.Color(255, 255, 255));
        sceneManagerCombo.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        sceneManagerCombo.setForeground(new java.awt.Color(25, 56, 82));
        sceneManagerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(sceneManagerCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(491, 415, 200, -1));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(25, 56, 82));
        jButton2.setText("Assign");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 470, -1, -1));

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(25, 56, 82));
        jLabel3.setText("MANAGE SCENE WORK REQUEST");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 33, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/crime128x.png"))); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 14, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/sceneOpaqueImage.png"))); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 510, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        UserAccount empUserAccount = null;
        boolean isResolved = true;
        
        //ReportingAdminSceneRequest scene = (ReportingAdminSceneRequest) siteNameComboBox.getSelectedItem();
        
        String sceneName = (String) siteNameComboBox.getSelectedItem();        
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof ReportingAdminSceneRequest && ((ReportingAdminSceneRequest) wr).getSceneManager() ==  null) {
                if(sceneName.equals(((ReportingAdminSceneRequest) wr).getSceneName()))
                selectedSite = (ReportingAdminSceneRequest) wr;
            }            
        }
        ReportingAdminSceneRequest scene = selectedSite;
        
        Employee employee = (Employee) sceneManagerCombo.getSelectedItem();
        
        if("".equals(sceneName)) { 
            JOptionPane.showMessageDialog(null, "Site Name is not available for assignment");
        }else if(employee == null) {
            JOptionPane.showMessageDialog(null, "Employee is not available for assignment");
        }else {
            for(Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                for (UserAccount u : o.getUserAccountDirectory().getUserAccountList()) {
                    if (u.getEmployee().getId() == (employee.getId())) {
                        //System.out.println("3[][][][][]");
                        //sceneManagerCombo.addItem(u.getEmployee());
                        //u.getWorkQueue().getWorkRequestList().add(scene);
                        empUserAccount = u;
                        break;
                    }
                }
            }

            for (WorkRequest wr : empUserAccount.getWorkQueue().getWorkRequestList()) {            
                if(wr instanceof ReportingAdminSceneRequest) {
                    if(!((ReportingAdminSceneRequest) wr).getStatus().equals("Resolved")) {
                        isResolved = false;
                        break;
                    }
                }            
            }

            if(isResolved) {
                String msg = JOptionPane.showInputDialog("Additional Message");
                scene.setSceneManager(employee);
                scene.setStatus("Scene Manager Assigned");
                scene.setMessage(msg);
                empUserAccount.getWorkQueue().getWorkRequestList().add(scene);
                JOptionPane.showMessageDialog(null, "Manager is assigned successfully");
                populateTable();
                populateSiteNameCombo();
            }else {
                JOptionPane.showMessageDialog(null, "This manager is already assigned to an active scene. Please select a different manager.");
            }
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void siteNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siteNameComboBoxActionPerformed
        /*String sceneName = (String) siteNameComboBox.getSelectedItem();
        
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof ReportingAdminSceneRequest && ((ReportingAdminSceneRequest) wr).getSceneManager() ==  null) {
                if(sceneName.equals(((ReportingAdminSceneRequest) wr).getSceneName()))
                selectedSite = (ReportingAdminSceneRequest) wr;
            }            
        }*/
    }//GEN-LAST:event_siteNameComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox sceneManagerCombo;
    private javax.swing.JComboBox siteNameComboBox;
    private javax.swing.JTable tblManageAssigned;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        tblManageAssigned.getTableHeader().setDefaultRenderer(new HeaderColors());
        DefaultTableModel model = (DefaultTableModel) tblManageAssigned.getModel();
        model.setRowCount(0);

        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof ReportingAdminSceneRequest && ((ReportingAdminSceneRequest) wr).getSceneManager() != null) {
                Object[] row = new Object[model.getColumnCount()];
                row[0] = ((ReportingAdminSceneRequest) wr);
                row[1] = ((ReportingAdminSceneRequest) wr).getSceneName();
                row[2] = ((ReportingAdminSceneRequest) wr).getSceneManager();
                row[3] = ((ReportingAdminSceneRequest) wr).getSender();
                row[4] = ((ReportingAdminSceneRequest) wr).getStatus();
                row[5] = ((ReportingAdminSceneRequest) wr).getMessage();
                model.addRow(row);
            }
        }

    }

    private void populateSiteNameCombo() {
        siteNameComboBox.removeAllItems();
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof ReportingAdminSceneRequest && ((ReportingAdminSceneRequest) wr).getSceneManager() ==  null) {
                siteNameComboBox.addItem(((ReportingAdminSceneRequest) wr).getSceneName());
            }            
        }
    }

    private void populateSiteManagerCombo() {
        sceneManagerCombo.removeAllItems();
        for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()) {
            if (u.getRole().toString().equals(Role.RoleType.SceneManager.getValue())) {
                sceneManagerCombo.addItem(u.getEmployee());
            }
        }
    }
}
